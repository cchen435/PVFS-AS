/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/*
 *  state machine for kmeans
 */

#define _ISOC99_SOURCE /* log2() */ 

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <time.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-request.h"
#include "pint-distribution.h"
#include "pint-request.h"
#include "pvfs2-internal.h"
#include "pint-cached-config.h"
#include "trove.h"

#ifdef BUILD_CUDA
extern void initGPU (float* objects, int numDataPoints,
		     int numDimensions, int numClusters);
extern void freeGPU (void);
extern void singleGPU (float* objects, int numDataPoints, 
		       int numDimensions, float* clusters, 
		       int numClusters, int* membership, 
		       int *newClusterSize,
		       float* newClusters, float *error);
#endif

#define CONTINUE_KMEANS 301
#define ALLREDUCE2 302
#define ALLREDUCE3 303
#define DONE_ALLREDUCES 304
#define SKIP_ALLREDUCE 305

#define DEBUG 0

int device_initialized=0;
#define MAX_ITERATIONS 500

struct timeval td_start, td_end;

%%

nested machine pvfs2_kmeans_sm
{
    state bcast_setup
    {
	run bcast_setup_fn;
	success => bcast;
    }

    state bcast
    {
	jump pvfs2_bcast_sm;
	success => cleanup_bcast;
    }

    state cleanup_bcast
    {
	run cleanup_bcast_fn;
	success => local_comp;
    }

    state local_comp
    {
        run local_comp_fn;
	success => allreduce_1_setup;
    }

    state allreduce_1_setup 
    {
	run allreduce_1_setup_fn;
	success => do_allreduce;
	SKIP_ALLREDUCE => cleanup_allreduce;
    }

    state do_allreduce
    {
	jump pvfs2_allreduce_sm;
	default => cleanup_allreduce;
    }

    state allreduce_2_setup
    {
	run allreduce_2_setup_fn;
	success => do_allreduce;
	SKIP_ALLREDUCE => cleanup_allreduce;
    }

    state allreduce_3_setup
    {
	run allreduce_3_setup_fn;
	success => do_allreduce;
	SKIP_ALLREDUCE => cleanup_allreduce;
    }

    state cleanup_allreduce
    {
	run cleanup_allreduce_fn;
	ALLREDUCE2 => allreduce_2_setup;
	ALLREDUCE3 => allreduce_3_setup;
	DONE_ALLREDUCES => check_done;
    }
    
    state check_done
    {
	run check_done_fn;
	CONTINUE_KMEANS => local_comp;
	success => return;
    }
}

%%

int mylog2(int num)
{
    int result;
    switch(num) {
    case 1: 
	result = 0;
	break;
    case 2: 
	result = 1;
	break;
    case 4:
	result = 2;
	break;
    case 8:
	result = 3;
	break;
    case 16: 
	result = 4;
	break;
    case 32: 
	result = 5;
	break;
    case 64:
	result = 6;
	break;
    default:
	break;
    }
    
    return (result);
}

int mypower(int base, int power)
{
    int res, is_neg_power = 0, i;

    /* Check the case of a negative power. */
    if (power < 0) {
      is_neg_power = 1;
      power = -power;
    }
    
    /* Compute the result. */
    res = 1;
    for (i = 0; i < power; i++)
	res *= base;

    if (!is_neg_power)
	return (res);
    else
	return (1/(double)res);
}

/* square of Euclid distance between two multi-dimensional points            */
__inline static
float euclid_dist_2(int    numdims,  /* no. dimensions */
                    float *coord1,   /* [numdims] */
                    float *coord2)   /* [numdims] */
{
    int i;
    float ans=0.0;
    
    for (i=0; i<numdims; i++)
	ans += (coord1[i]-coord2[i]) * (coord1[i]-coord2[i]);
    
    return(ans);
}

/*----< find_nearest_cluster() >---------------------------------------------*/
__inline static
int find_nearest_cluster(int     numClusters, /* no. clusters */
                         int     numCoords,   /* no. coordinates */
                         float  *object,      /* [numCoords] */
                         float **clusters)    /* [numClusters][numCoords] */
{
  int   index, i;
  float dist, min_dist;

  /* find the cluster id that has min distance to object */
  index    = 0;
  min_dist = euclid_dist_2(numCoords, object, clusters[0]);
  
  for (i=1; i<numClusters; i++) {
      dist = euclid_dist_2(numCoords, object, clusters[i]);
      /* no need square root */
      if (dist < min_dist) { /* find the min and its array index */
	  min_dist = dist;
	  index    = i;
      }
  }
  return(index);
}

/*
 */
static PINT_sm_action bcast_setup_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret, i;
    //int myRank = s_op->u.kmeans.myRank;
    struct PINT_server_op *bcast_op;

    js_p->error_code = 0;

    /* membership: the cluster id for each data object */
    s_op->u.kmeans.membership = (int*) malloc(s_op->u.kmeans.numObjs * sizeof(int));
    assert(s_op->u.kmeans.membership != NULL);

    /* initialize membership[] */
    for (i=0; i<s_op->u.kmeans.numObjs; i++) 
	s_op->u.kmeans.membership[i] = -1;

    /* need to initialize newClusterSize and newClusters[0] to all 0 */
    s_op->u.kmeans.newClusterSize = (int*) calloc(s_op->u.kmeans.numClusters, sizeof(int));
    assert(s_op->u.kmeans.newClusterSize != NULL);
    s_op->u.kmeans.clusterSize = (int*) calloc(s_op->u.kmeans.numClusters, sizeof(int));
    assert(s_op->u.kmeans.clusterSize != NULL);
    
    s_op->u.kmeans.newClusters = (float**) malloc(s_op->u.kmeans.numClusters * sizeof(float*));
    assert(s_op->u.kmeans.newClusters != NULL);
    s_op->u.kmeans.newClusters[0] = (float*)  calloc(s_op->u.kmeans.numClusters * s_op->u.kmeans.numCoords, sizeof(float));
    assert(s_op->u.kmeans.newClusters[0] != NULL);
    for (i=1; i<s_op->u.kmeans.numClusters; i++)
	s_op->u.kmeans.newClusters[i] = s_op->u.kmeans.newClusters[i-1] + s_op->u.kmeans.numCoords;

    /* setup bcast */
    bcast_op = malloc(sizeof(*bcast_op));
    memset(bcast_op, 0, sizeof(*bcast_op));

    bcast_op->u.bcast.fs_id = s_op->u.kmeans.fs_id;
    bcast_op->u.bcast.myRank = s_op->u.kmeans.myRank;
    bcast_op->u.bcast.buf_sz = s_op->u.kmeans.numClusters*s_op->u.kmeans.numCoords*sizeof(float);
    bcast_op->u.bcast.recv_buf = (void*)malloc(bcast_op->u.bcast.buf_sz);
    memset(bcast_op->u.bcast.recv_buf, 0, bcast_op->u.bcast.buf_sz);
    bcast_op->u.bcast.datatype = (int)0x4c00040a; //MPI_FLOAT;
    bcast_op->u.bcast.dfile_array = s_op->u.kmeans.dfile_array;
    bcast_op->u.bcast.dfile_count = s_op->u.kmeans.dfile_count;
    /* d = log(P) */
    bcast_op->u.bcast.tree_depth = mylog2(s_op->u.kmeans.dfile_count);
    /* mask = 2^d - 1 */
    bcast_op->u.bcast.mask = mypower(2, bcast_op->u.bcast.tree_depth)-1;
    /* index = d - 1 */
    bcast_op->u.bcast.index = bcast_op->u.bcast.tree_depth-1;
    bcast_op->u.bcast.send_buf = (void*)malloc(bcast_op->u.bcast.buf_sz);
    memset(bcast_op->u.bcast.send_buf, 0, bcast_op->u.bcast.buf_sz);
    memcpy(bcast_op->u.bcast.send_buf, s_op->u.kmeans.clusters[0], 
	   bcast_op->u.bcast.buf_sz);
    
    ret = PINT_sm_push_frame(smcb, 0, bcast_op);
    
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action cleanup_bcast_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id, remaining;
    int i, j;
    PVFS_error tmp_err;
    struct PINT_server_op *bcast_op;
    js_p->error_code = 0;

    bcast_op = PINT_sm_pop_frame(smcb, &task_id, &tmp_err, 
				 &remaining);
    gossip_debug(GOSSIP_SERVER_DEBUG, 
		 "kmeans: nested sm (bcast) returned error code: %d, remaining=%d\n", tmp_err, remaining);
    
    if(s_op->u.kmeans.myRank != 0) {
	memcpy(s_op->u.kmeans.clusters[0], 
	       bcast_op->u.bcast.send_buf,
	       bcast_op->u.bcast.buf_sz);
    }
#if DEBUG   
    /* debug print */
    for(i=0; i<s_op->u.kmeans.numClusters; i++)
	for(j=0; j<s_op->u.kmeans.numCoords; j++)
	    gossip_debug(GOSSIP_IO_DEBUG, "%s: clusters[%d][%d]=%lf\n", 
			 __func__, i, j, s_op->u.kmeans.clusters[i][j]);
#endif
    free(bcast_op->u.bcast.send_buf);
    free(bcast_op->u.bcast.recv_buf);
    free(bcast_op);
#ifdef BUILD_CUDA
    if(s_op->u.kmeans.use_gpu == 1) {
	/* initialize GPU device and allocate memory on it */
	if(device_initialized == 0) {
            time_t start, end;
	    /* initDevice(argc, argv, numObjs, numCoords, numClusters) */
            gossip_debug(GOSSIP_IO_DEBUG, "before initGPU\n");
            time(&start);
	    initGPU(s_op->u.kmeans.objects[0], s_op->u.kmeans.numObjs,
		    s_op->u.kmeans.numCoords, s_op->u.kmeans.numClusters);
            time(&end);
            gossip_debug(GOSSIP_IO_DEBUG, "after initGPU: elapsed=%lf ms\n",
                         difftime(end, start)*1000);
	    /* FIXME: I don't know why this is called twice */
	    device_initialized = 1;
	}
    }
#endif
    return SM_ACTION_COMPLETE;
}

/*
 */
static PINT_sm_action local_comp_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i, j, index;

    s_op->u.kmeans.delta = 0.0;

    if(s_op->u.kmeans.use_gpu == 1) {
	gossip_debug(GOSSIP_IO_DEBUG, "%s: before calling singleGPU\n", __func__);
#ifdef BUILD_CUDA
	singleGPU(s_op->u.kmeans.objects[0], s_op->u.kmeans.numObjs,
		  s_op->u.kmeans.numCoords, s_op->u.kmeans.clusters[0],
		  s_op->u.kmeans.numClusters, s_op->u.kmeans.membership,
		  s_op->u.kmeans.newClusterSize,
		  s_op->u.kmeans.newClusters[0], &s_op->u.kmeans.delta);
#endif
	
	gossip_debug(GOSSIP_IO_DEBUG, "%s: after calling singleGPU\n", __func__);
    }
    else {
	for(i=0; i<s_op->u.kmeans.numObjs; i++) {
	    /* find the array index of nestest cluster center */
	    index = find_nearest_cluster(s_op->u.kmeans.numClusters, 
					 s_op->u.kmeans.numCoords, 
					 s_op->u.kmeans.objects[i],
					 s_op->u.kmeans.clusters);
	    
	    /* NOTE: following will generate lots of messages */
	    /* gossip_debug(GOSSIP_IO_DEBUG, "i=%d: index=%d\n", i, index); */
	    
	    /* if membership changes, increase delta by 1 */
	    if (s_op->u.kmeans.membership[i] != index) 
		s_op->u.kmeans.delta += 1.0;
	    
	    /* assign the membership to object i */
	    s_op->u.kmeans.membership[i] = index;
	    
	    /* update new cluster centers : sum of objects located within */
	    s_op->u.kmeans.newClusterSize[index]++;
	    for (j=0; j<s_op->u.kmeans.numCoords; j++) {
		s_op->u.kmeans.newClusters[index][j] += s_op->u.kmeans.objects[i][j];
#if DEBUG
		gossip_debug(GOSSIP_IO_DEBUG, 
			     "newCluster[%d][%d] = objects[%d][%d] = %lf\n",
			     index, j, i, j, s_op->u.kmeans.objects[i][j]);
#endif
	    }
	}
    }

#if DEBUG
    for(i=0; i<s_op->u.kmeans.numClusters; i++)
	for(j=0; j<s_op->u.kmeans.numCoords; j++)
	    gossip_debug(GOSSIP_IO_DEBUG, 
			 "%2d: newClusters[%d][%d]=%lf\n", 
			 s_op->u.kmeans.myRank, i, j, 
			 s_op->u.kmeans.newClusters[i][j]);

    gossip_debug(GOSSIP_IO_DEBUG, "before Allreduce: delta=%f\n", s_op->u.kmeans.delta);
    for (i=0; i<s_op->u.kmeans.numClusters; i++)
	for (j=0; j<s_op->u.kmeans.numCoords; j++)
	    gossip_debug(GOSSIP_IO_DEBUG, 
			 "%2d: clusters[%d][%d]=%lf\n", 
			 s_op->u.kmeans.myRank, i, j, 
			 s_op->u.kmeans.clusters[i][j]);
#endif

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action allreduce_1_setup_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *allreduce_op;
    int ret;

    /* if there's only one server, we don't need to do allreduce */
    if(mylog2(s_op->u.kmeans.dfile_count) == 0) {
	js_p->error_code = SKIP_ALLREDUCE;
	return SM_ACTION_COMPLETE;
    }

    allreduce_op = malloc(sizeof(*allreduce_op));
    memset(allreduce_op, 0, sizeof(*allreduce_op));
    
    allreduce_op->u.allreduce.fs_id = s_op->u.kmeans.fs_id;
    allreduce_op->u.allreduce.myRank = s_op->u.kmeans.myRank;
    allreduce_op->u.allreduce.buf_sz = s_op->u.kmeans.numClusters*s_op->u.kmeans.numCoords*sizeof(float);
    gossip_debug(GOSSIP_IO_DEBUG, "%s: buf_sz=%ld\n", __func__, allreduce_op->u.allreduce.buf_sz);
    allreduce_op->u.allreduce.recv_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.recv_buf, 0, allreduce_op->u.allreduce.buf_sz);
    allreduce_op->u.allreduce.tree_depth = mylog2(s_op->u.kmeans.dfile_count);
    gossip_debug(GOSSIP_IO_DEBUG, "tree_depth=%d\n", 
		 allreduce_op->u.allreduce.tree_depth);
    allreduce_op->u.allreduce.op = 0; /* FIXME: SUM */
    allreduce_op->u.allreduce.datatype = (int)0x4c00040a; //MPI_FLOAT;
    allreduce_op->u.allreduce.current_depth = 0;
    allreduce_op->u.allreduce.mask = 0x1;
    allreduce_op->u.allreduce.dfile_array = s_op->u.kmeans.dfile_array;
    allreduce_op->u.allreduce.send_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.send_buf, 0, allreduce_op->u.allreduce.buf_sz);
    memcpy(allreduce_op->u.allreduce.send_buf, s_op->u.kmeans.newClusters[0], allreduce_op->u.allreduce.buf_sz);

    ret = PINT_sm_push_frame(smcb, 0, allreduce_op);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action allreduce_2_setup_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *allreduce_op;
    int ret;

    /* if there's only one server, we don't need to do allreduce */
    if(mylog2(s_op->u.kmeans.dfile_count) == 0) {
	js_p->error_code = SKIP_ALLREDUCE;
	return SM_ACTION_COMPLETE;
    }

    allreduce_op = malloc(sizeof(*allreduce_op));
    memset(allreduce_op, 0, sizeof(*allreduce_op));
    
    allreduce_op->u.allreduce.fs_id = s_op->u.kmeans.fs_id;
    allreduce_op->u.allreduce.myRank = s_op->u.kmeans.myRank;
    allreduce_op->u.allreduce.buf_sz = s_op->u.kmeans.numClusters*sizeof(int);
    allreduce_op->u.allreduce.recv_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.recv_buf, 0, allreduce_op->u.allreduce.buf_sz);
    allreduce_op->u.allreduce.tree_depth = mylog2(s_op->u.kmeans.dfile_count);
    gossip_debug(GOSSIP_IO_DEBUG, "tree_depth=%d\n", 
		 allreduce_op->u.allreduce.tree_depth);
    allreduce_op->u.allreduce.op = 0; /* FIXME: SUM */
    allreduce_op->u.allreduce.datatype = (int)0x4c000405; //MPI_INT;
    allreduce_op->u.allreduce.current_depth = 0;
    allreduce_op->u.allreduce.mask = 0x1;
    allreduce_op->u.allreduce.dfile_array = s_op->u.kmeans.dfile_array;
    allreduce_op->u.allreduce.send_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.send_buf, 0, allreduce_op->u.allreduce.buf_sz);
    memcpy(allreduce_op->u.allreduce.send_buf, s_op->u.kmeans.newClusterSize, allreduce_op->u.allreduce.buf_sz);
    
    ret = PINT_sm_push_frame(smcb, 0, allreduce_op);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action allreduce_3_setup_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *allreduce_op;
    int ret;

    /* if there's only one server, we don't need to do allreduce */
    if(mylog2(s_op->u.kmeans.dfile_count) == 0) {
	js_p->error_code = SKIP_ALLREDUCE;
	return SM_ACTION_COMPLETE;
    }

    allreduce_op = malloc(sizeof(*allreduce_op));
    memset(allreduce_op, 0, sizeof(*allreduce_op));

    allreduce_op->u.allreduce.fs_id = s_op->u.kmeans.fs_id;
    allreduce_op->u.allreduce.myRank = s_op->u.kmeans.myRank;
    allreduce_op->u.allreduce.buf_sz = 1*sizeof(float);
    allreduce_op->u.allreduce.recv_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.recv_buf, 0, allreduce_op->u.allreduce.buf_sz);
    allreduce_op->u.allreduce.tree_depth = mylog2(s_op->u.kmeans.dfile_count);
    gossip_debug(GOSSIP_IO_DEBUG, "tree_depth=%d\n", 
		 allreduce_op->u.allreduce.tree_depth);
    /* if there's only one server, we don't need to do allreduce */
    if(allreduce_op->u.allreduce.tree_depth == 0) {
	js_p->error_code = 0;
	return SM_ACTION_COMPLETE;
    }
    allreduce_op->u.allreduce.op = 0; /* FIXME: SUM */
    allreduce_op->u.allreduce.datatype = (int)0x4c00040a; //MPI_FLOAT;
    allreduce_op->u.allreduce.current_depth = 0;
    allreduce_op->u.allreduce.mask = 0x1;
    allreduce_op->u.allreduce.dfile_array = s_op->u.kmeans.dfile_array;
    allreduce_op->u.allreduce.send_buf = (void*)malloc(allreduce_op->u.allreduce.buf_sz);
    memset(allreduce_op->u.allreduce.send_buf, 0, allreduce_op->u.allreduce.buf_sz);
    memcpy(allreduce_op->u.allreduce.send_buf, &s_op->u.kmeans.delta, allreduce_op->u.allreduce.buf_sz);
    
    ret = PINT_sm_push_frame(smcb, 0, allreduce_op);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action cleanup_allreduce_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *allreduce_op;
    int task_id, remaining;
    PVFS_error tmp_err;
    int i, j;
    js_p->error_code = 0;

    /* if there's only one server, we don't do allreduce */
    if(mylog2(s_op->u.kmeans.dfile_count) != 0) {
	allreduce_op = PINT_sm_pop_frame(smcb, &task_id, &tmp_err, 
					 &remaining);
	gossip_debug(GOSSIP_SERVER_DEBUG, 
		     "kmeans: nested sm (allreduce) returned error code: %d, remaining=%d\n", tmp_err, remaining);
    }
	
    switch(s_op->u.kmeans.allreduce_step) {
    case 0:
	/* if there's only one server, we don't need to do allreduce */
	if(mylog2(s_op->u.kmeans.dfile_count) != 0) {
	    memcpy(s_op->u.kmeans.clusters[0], 
		   allreduce_op->u.allreduce.send_buf,
		   allreduce_op->u.allreduce.buf_sz);
	}
	else
	    memcpy(s_op->u.kmeans.clusters[0], 
		   s_op->u.kmeans.newClusters[0],
		   s_op->u.kmeans.numClusters*s_op->u.kmeans.numCoords*sizeof(float));
#if DEBUG
	gossip_debug(GOSSIP_IO_DEBUG, "After allreduce\n");
	for (i=0; i<s_op->u.kmeans.numClusters; i++)
	    for (j=0; j<s_op->u.kmeans.numCoords; j++)
		gossip_debug(GOSSIP_IO_DEBUG, 
			     "%2d: clusters[%d][%d]=%lf\n", 
			     s_op->u.kmeans.myRank, i, j, 
			     s_op->u.kmeans.clusters[i][j]);
#endif
	js_p->error_code = ALLREDUCE2;
	break;
    case 1:
	/* if there's only one server, we don't need to do allreduce */
	if(mylog2(s_op->u.kmeans.dfile_count) != 0) {
	    memcpy(s_op->u.kmeans.clusterSize, /* [numClusters] */
		   allreduce_op->u.allreduce.send_buf,
		   allreduce_op->u.allreduce.buf_sz);
	    gossip_debug(GOSSIP_IO_DEBUG, "rank=%d, buf_sz=%ld\n", 
			 allreduce_op->u.allreduce.myRank,
			 allreduce_op->u.allreduce.buf_sz);
	}
	else
	    memcpy(s_op->u.kmeans.clusterSize, 
		   s_op->u.kmeans.newClusterSize,
		   s_op->u.kmeans.numClusters*sizeof(int));

	/* average the sum and replace old cluster 
	   centers with newClusters */
	for (i=0; i<s_op->u.kmeans.numClusters; i++) {
	    for (j=0; j<s_op->u.kmeans.numCoords; j++) {
		if (s_op->u.kmeans.clusterSize[i] > 1)
		    s_op->u.kmeans.clusters[i][j] /= 
			s_op->u.kmeans.clusterSize[i];
		s_op->u.kmeans.newClusters[i][j] = 0.0;   /* set back to 0 */
	    }
	    s_op->u.kmeans.newClusterSize[i] = 0;   /* set back to 0 */
	}
	
	js_p->error_code = ALLREDUCE3;
	break;
    case 2:
	/* if there's only one server, we don't need to do allreduce */
	if(mylog2(s_op->u.kmeans.dfile_count) != 0) {
	    memcpy(&s_op->u.kmeans.delta_tmp, 
		   allreduce_op->u.allreduce.send_buf,
		   allreduce_op->u.allreduce.buf_sz);
	    s_op->u.kmeans.delta = s_op->u.kmeans.delta_tmp/s_op->u.kmeans.totalNumObjs;
	    gossip_debug(GOSSIP_IO_DEBUG, 
			 "delta_tmp=%f, delta=%f, buf_sz=%ld\n", 
			 s_op->u.kmeans.delta_tmp,
			 s_op->u.kmeans.delta,
			 allreduce_op->u.allreduce.buf_sz);
	}
	else {
	    memcpy(&s_op->u.kmeans.delta_tmp, 
		   &s_op->u.kmeans.delta,
		   1*sizeof(float));
	    s_op->u.kmeans.delta = s_op->u.kmeans.delta_tmp/s_op->u.kmeans.totalNumObjs;
	    gossip_debug(GOSSIP_IO_DEBUG, 
			 "delta_tmp=%f, delta=%f\n", 
			 s_op->u.kmeans.delta_tmp,
			 s_op->u.kmeans.delta);
	}
	    
	js_p->error_code = DONE_ALLREDUCES;
	break;
    default:
	break;
    } /* end switch() */

    /* if there's only one server, we don't do allreduce */
    if(mylog2(s_op->u.kmeans.dfile_count) != 0) {
	free(allreduce_op->u.allreduce.send_buf);
	free(allreduce_op->u.allreduce.recv_buf);
	free(allreduce_op);
    }

    s_op->u.kmeans.allreduce_step++;
	
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action check_done_fn(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i, j;

    gossip_debug(GOSSIP_IO_DEBUG, "%s: loop=%d, delta=%lf, threshold=%f\n", 
                 __func__, s_op->u.kmeans.loop,
                 s_op->u.kmeans.delta, s_op->u.kmeans.threshold);

    if(s_op->u.kmeans.delta > s_op->u.kmeans.threshold && 
       s_op->u.kmeans.loop++ < MAX_ITERATIONS) {
	js_p->error_code = CONTINUE_KMEANS;
	s_op->u.kmeans.allreduce_step = 0;      
    }
    else {
	js_p->error_code = 0;
        
        gossip_debug(GOSSIP_IO_DEBUG, "kmeans DONE!\n");
#ifdef BUILD_CUDA
	if(s_op->u.kmeans.use_gpu == 1)
	    freeGPU();
#endif
#if DEBUG
	/* print out the final result */
	for (i=0; i<s_op->u.kmeans.numObjs; i++) 
	    gossip_debug(GOSSIP_IO_DEBUG, "%s: membership[%d]=%d\n",
			 __func__, i, s_op->u.kmeans.membership[i]);
	for (i=0; i<s_op->u.kmeans.numClusters; i++)
	    for(j=0; j<s_op->u.kmeans.numCoords; j++)
		gossip_debug(GOSSIP_IO_DEBUG, "%s: clusters[%d][%d]=%lf\n",
			     __func__, i, j, s_op->u.kmeans.newClusters[i][j]);

	for (i=0; i<s_op->u.kmeans.numClusters; i++)
	    gossip_debug(GOSSIP_IO_DEBUG, "%s: clusterSize[%d]=%d\n",
			 __func__, i, s_op->u.kmeans.newClusters[i]);
#endif	

    }
    
    return SM_ACTION_COMPLETE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
